searchState.loadedDescShard("lexical_write_float", 0, "Fast and compact float-to-string conversions.\nMaximum number of bytes required to serialize any number …\nMaximum number of bytes required to serialize a number to …\nMaximum number of bytes required to serialize a number to …\nThe size, in bytes, of formatted values.\nBuild number format from specifications.\nOptions to customize writing floats.\nCustom formatting options for writing a number.\nBuilder for <code>Options</code>.\nRound to the nearest float string with the given number of …\nEnumeration for how to round floats with precision control.\nTrait for numerical types that can be serialized to bytes.\nTrait for numerical types that can be serialized to bytes …\nTruncate the float string with the given number of …\nShared trait for all writer options.\nSet the optional character for the base prefix.\nSet the optional character for the base suffix.\nCreate number format for standard, binary number.\nGet an upper bound on the buffer size.\nCreate 128-bit, packed number format struct from builder …\nSet if base prefixes are case-sensitive.\nSet if base suffixes are case-sensitive.\nSet if exponent characters are case-sensitive.\nSet if special (non-finite) values are case-sensitive.\nSet all consecutive digit separator flags.\nCreate number format for standard, decimal number.\nSet the digit separator for the number format.\nSet all digit separator flag masks.\nSet the radix for the exponent.\nSet if multiple consecutive exponent digit separators are …\nSet all exponent digit separator flag masks.\nSet if digit separators are allowed between exponent …\nSet if a digit separator is allowed before any exponent …\nSet the radix for exponent digits.\nSet if a digit separator is allowed after any exponent …\nPublic API for the number format packed struct.\nSet if multiple consecutive fraction digit separators are …\nSet all fraction digit separator flag masks.\nSet if digit separators are allowed between fraction …\nSet if a digit separator is allowed before any fraction …\nSet if a digit separator is allowed after any fraction …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate number format from radix.\nGet the optional character for the base prefix.\nGet the optional character for the base suffix.\nGet if base prefixes are case-sensitive.\nGet if base suffixes are case-sensitive.\nGet if exponent characters are case-sensitive.\nGet if special (non-finite) values are case-sensitive.\nGet the digit separator for the number format.\nGet the radix for the exponent.\nGet if multiple consecutive exponent digit separators are …\nGet if digit separators are allowed between exponent …\nGet if a digit separator is allowed before any exponent …\nGet the radix for exponent digits.\nGet if a digit separator is allowed after any exponent …\nGet if multiple consecutive fraction digit separators are …\nGet if digit separators are allowed between fraction …\nGet if a digit separator is allowed before any fraction …\nGet if a digit separator is allowed after any fraction …\nGet if multiple consecutive integer digit separators are …\nGet if digit separators are allowed between integer digits.\nGet if a digit separator is allowed before any integer …\nGet if a digit separator is allowed after any integer …\nGet the radix for mantissa digits.\nGet if exponent notation is not allowed.\nGet if an exponent without fraction is not allowed.\nGet if leading zeros before a float are not allowed.\nGet if leading zeros before an integer are not allowed.\nGet if a positive sign before the exponent is not allowed.\nGet if a positive sign before the mantissa is not allowed.\nGet if special (non-finite) values are not allowed.\nGet if digits are required after the exponent character.\nGet if exponent notation is required.\nGet if a sign symbol before the exponent is required.\nGet if digits are required after the decimal point.\nGet if digits are required before the decimal point.\nGet if at least 1 significant digit is required.\nGet if a sign symbol before the mantissa is required.\nGet if any digit separators are allowed in special …\nCreate number format for standard, hexadecimal number.\nSet if multiple consecutive integer digit separators are …\nSet all integer digit separator flag masks.\nSet if digit separators are allowed between integer digits.\nSet if a digit separator is allowed before any integer …\nSet if a digit separator is allowed after any integer …\nSet all internal digit separator flags.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if the options are valid.\nSet all leading digit separator flags.\nSet the radix for mantissa digits.\nCreate new <code>NumberFormatBuilder</code> with default arguments.\nSet if exponent notation is not allowed.\nSet if an exponent without fraction is not allowed.\nSet if leading zeros before a float are not allowed.\nSet if leading zeros before an integer are not allowed.\nSet if a positive sign before the exponent is not allowed.\nSet if a positive sign before the mantissa is not allowed.\nSet if special (non-finite) values are not allowed.\nCreate number format for standard, octal number.\nConfiguration options for writing floats.\nDetermine if we should round down.\nAlias for mantissa radix.\nRe-create builder from format.\nSet if digits are required for all float components.\nSet if digits are required after the exponent character.\nSet if exponent notation is required.\nSet if a sign symbol before the exponent is required.\nSet if digits are required after the decimal point.\nSet if digits are required before the decimal point.\nSet if at least 1 significant digit is required.\nSet if a sign symbol before the mantissa is required.\nSet if any digit separators are allowed in special …\nSerializer for a number-to-string conversion.\nSerializer for a number-to-string conversion.\nSet all trailing digit separator flags.\nMask to extract the base prefix character.\nShift to convert to and from a base prefix as a <code>u8</code>.\nMask to extract the base suffix character.\nShift to convert to and from a base suffix as a <code>u8</code>.\nNumber format for a <code>C11</code> literal hexadecimal floating-point …\nNumber format for a <code>C11</code> string hexadecimal floating-point …\nNumber format for a <code>C11</code> literal floating-point number.\nNumber format for a <code>C11</code> string floating-point number.\nNumber format for a <code>C18</code> literal hexadecimal floating-point …\nNumber format for a <code>C18</code> string hexadecimal floating-point …\nNumber format for a <code>C18</code> literal floating-point number.\nNumber format for a <code>C18</code> string floating-point number.\nNumber format for a <code>C89</code> string hexadecimal floating-point …\nNumber format for a <code>C89</code> literal floating-point number.\nNumber format for a <code>C89</code> string floating-point number.\nNumber format for a <code>C90</code> string hexadecimal floating-point …\nNumber format for a <code>C90</code> literal floating-point number.\nNumber format for a <code>C90</code> string floating-point number.\nNumber format for a <code>C99</code> literal hexadecimal floating-point …\nNumber format for a <code>C99</code> string hexadecimal floating-point …\nNumber format for a <code>C99</code> literal floating-point number.\nNumber format for a <code>C99</code> string floating-point number.\nBase prefixes are case-sensitive.\nBase suffixes are case-sensitive.\nExponent characters are case-sensitive.\nSpecial (non-finite) values are case-sensitive.\nNumber format for a <code>Clojure</code> literal floating-point number.\nNumber format to parse a <code>Clojure</code> float from string.\nNumber format for a <code>Cobol</code> literal floating-point number.\nNumber format to parse a <code>Cobol</code> float from string.\nNumber format for a <code>Coffeescript</code> literal floating-point …\nNumber format to parse a <code>Coffeescript</code> float from string.\nMultiple consecutive digit separators are allowed.\nNumber format for a <code>C#1</code> literal floating-point number.\nNumber format to parse a <code>C#1</code> float from string.\nNumber format for a <code>C#2</code> literal floating-point number.\nNumber format to parse a <code>C#2</code> float from string.\nNumber format for a <code>C#3</code> literal floating-point number.\nNumber format to parse a <code>C#3</code> float from string.\nNumber format for a <code>C#4</code> literal floating-point number.\nNumber format to parse a <code>C#4</code> float from string.\nNumber format for a <code>C#5</code> literal floating-point number.\nNumber format to parse a <code>C#5</code> float from string.\nNumber format for a <code>C#6</code> literal floating-point number.\nNumber format to parse a <code>C#6</code> float from string.\nNumber format for a <code>C#7</code> literal floating-point number.\nNumber format to parse a <code>C#7</code> float from string.\nNumber format for a <code>C#</code> literal floating-point number.\nNumber format to parse a <code>C#</code> float from string.\nNumber format for a <code>C++03</code> literal floating-point number.\nNumber format for a <code>C++03</code> string floating-point number.\nNumber format for a <code>C++11</code> string hexadecimal …\nNumber format for a <code>C++11</code> literal floating-point number.\nNumber format for a <code>C++11</code> string floating-point number.\nNumber format for a <code>C++14</code> string hexadecimal …\nNumber format for a <code>C++14</code> literal floating-point number.\nNumber format for a <code>C++14</code> string floating-point number.\nNumber format for a <code>C++17</code> literal hexadecimal …\nNumber format for a <code>C++17</code> string hexadecimal …\nNumber format for a <code>C++17</code> literal floating-point number.\nNumber format for a <code>C++17</code> string floating-point number.\nNumber format for a <code>C++20</code> literal hexadecimal …\nNumber format for a <code>C++20</code> string hexadecimal …\nNumber format for a <code>C++20</code> literal floating-point number.\nNumber format for a <code>C++20</code> string floating-point number.\nNumber format for a <code>C++98</code> literal floating-point number.\nNumber format for a <code>C++98</code> string floating-point number.\nNumber format for a <code>C++</code> literal hexadecimal floating-point …\nNumber format to parse a <code>C++</code> hexadecimal float from string.\nNumber format for a <code>C++</code> literal floating-point number.\nNumber format to parse a <code>C++</code> float from string.\nNumber format for a <code>C</code> literal hexadecimal floating-point …\nNumber format to parse a <code>C</code> hexadecimal float from string.\nNumber format for a C literal floating-point number.\nNumber format to parse a <code>C</code> float from string.\nMask to extract the digit separator character.\nShift to convert to and from a digit separator as a <code>u8</code>.\nNumber format for a <code>D</code> literal floating-point number.\nNumber format to parse a <code>D</code> float from string.\nNumber format for an <code>Elixir</code> literal floating-point number.\nNumber format to parse an <code>Elixir</code> float from string.\nNumber format for an <code>Elm</code> literal floating-point number.\nNumber format to parse an <code>Elm</code> float from string.\nNumber format for an <code>Erlang</code> literal floating-point number.\nNumber format to parse an <code>Erlang</code> float from string.\nMask to extract the exponent base: the base the exponent …\nShift to convert to and from an exponent base as a <code>u32</code>.\nMultiple consecutive exponent digit separators are allowed.\nDigit separators are allowed between exponent digits.\nA digit separator is allowed before any exponent digits.\nMask to extract the exponent radix: the radix for the …\nShift to convert to and from an exponent radix as a <code>u32</code>.\nA digit separator is allowed after any exponent digits.\nNumber format for a <code>FORTRAN</code> literal floating-point number.\nNumber format to parse a <code>FORTRAN</code> float from string.\nMultiple consecutive fraction digit separators are allowed.\nDigit separators are allowed between fraction digits.\nA digit separator is allowed before any fraction digits.\nA digit separator is allowed after any fraction digits.\nNumber format for a <code>F#</code> literal floating-point number.\nNumber format to parse a <code>F#</code> float from string.\nNumber format for a <code>Gambit-C</code> literal floating-point number.\nNumber format to parse a <code>Gambit-C</code> float from string.\nNumber format for a <code>Golang</code> literal floating-point number.\nNumber format to parse a <code>Golang</code> float from string.\nNumber format for a <code>Guile</code> literal floating-point number.\nNumber format to parse a <code>Guile</code> float from string.\nNumber format for a <code>Haskell</code> literal floating-point number.\nNumber format to parse a <code>Haskell</code> float from string.\nMultiple consecutive integer digit separators are allowed.\nDigit separators are allowed between integer digits.\nA digit separator is allowed before any integer digits.\nA digit separator is allowed after any integer digits.\nDigit separators are allowed between digits.\nNumber format for a <code>Javascript</code> literal floating-point …\nNumber format to parse a <code>Javascript</code> float from string.\nNumber format for a <code>Java</code> literal floating-point number.\nNumber format to parse a <code>Java</code> float from string.\nNumber format for a <code>JSON</code> literal floating-point number.\nNumber format for a <code>Julia</code> literal floating-point number.\nNumber format to parse a <code>Julia</code> float from string.\nNumber format for a <code>Julia</code> literal floating-point number.\nNumber format to parse a <code>Julia</code> float from string.\nNumber format for a <code>Kawa</code> literal floating-point number.\nNumber format to parse a <code>Kawa</code> float from string.\nNumber format for a <code>Kotlin</code> literal floating-point number.\nNumber format to parse a <code>Kotlin</code> float from string.\nA digit separator is allowed before any digits.\nMask to extract the mantissa radix: the radix for the …\nShift to convert to and from a mantissa radix as a <code>u32</code>.\nNumber format for an <code>Matlab</code> literal floating-point number.\nNumber format to parse an <code>Matlab</code> float from string.\nNumber format for a <code>MongoDB</code> literal floating-point number.\nNumber format for a <code>MySQL</code> literal floating-point number.\nExponent notation is not allowed.\nExponent without a fraction component is not allowed.\nLeading zeros before a float value are not allowed.\nLeading zeros before an integer value are not allowed.\nPositive sign before the exponent is not allowed.\nPositive sign before the mantissa is not allowed.\nSpecial (non-finite) values are not allowed.\nNo value.\nBuild number format from specifications.\nNumber format for an <code>Objective-C</code> literal floating-point …\nNumber format to parse an <code>Objective-C</code> float from string.\nNumber format for an <code>OCaml</code> literal floating-point number.\nNumber format to parse an <code>OCaml</code> float from string.\nNumber format for an <code>Octave</code> literal floating-point number.\nNumber format to parse an <code>Octave</code> float from string.\nType with the exact same size as a <code>u8</code>.\nNumber format for a <code>Perl</code> literal floating-point number.\nNumber format to parse a <code>Perl</code> float from string.\nNumber format for a <code>PHP</code> literal floating-point number.\nNumber format to parse a <code>PHP</code> float from string.\nNumber format for a <code>PostgreSQL</code> literal floating-point …\nNumber format for a <code>Python2</code> literal floating-point number.\nNumber format to parse a <code>Python2</code> float from string.\nNumber format for a <code>Python3.5</code> or lower literal …\nNumber format for a <code>Python3.6</code> or higher literal …\nNumber format for a <code>Python3</code> literal floating-point number.\nNumber format to parse a <code>Python3</code> float from string.\nNumber format for a <code>Python</code> literal floating-point number.\nNumber format to parse a <code>Python</code> float from string.\nAlias for <code>MANTISSA_RADIX</code>.\nAlias for <code>MANTISSA_RADIX_SHIFT</code>.\nNumber format for a <code>ReasonML</code> literal floating-point number.\nNumber format to parse a <code>ReasonML</code> float from string.\nAt least 1 digit in the number is required.\nDigits are required after the exponent character. This …\nExponent notation is required.\nPositive sign before the exponent is required.\nDigits are required after the decimal point. This check …\nDigits are required before the decimal point.\nMantissa digits are required (either before or after the …\nPositive sign before the mantissa is required.\nNumber format for a <code>Ruby</code> literal floating-point number.\nNumber format for a <code>Ruby</code> literal floating-point number.\nNumber format to parse a <code>Ruby</code> float from string.\nNumber format for a <code>Rust</code> literal floating-point number.\nNumber format to parse a <code>Rust</code> float from string.\nNumber format for a <code>R</code> literal floating-point number.\nNumber format to parse a <code>R</code> float from string.\nNumber format for a <code>Sage</code> literal floating-point number.\nNumber format to parse a <code>Sage</code> float from string.\nNumber format for a <code>Scala</code> literal floating-point number.\nNumber format to parse a <code>Scala</code> float from string.\nAny digit separators are allowed in special (non-finite) …\nNumber format for a <code>SQLite</code> literal floating-point number.\nStandard number format. This is identical to the Rust …\nNumber format for a <code>Swift</code> literal floating-point number.\nNumber format to parse a <code>Swift</code> float from string.\nSome value of type <code>T</code>.\nNumber format for a <code>TOML</code> literal floating-point number.\nA digit separator is allowed after any digits.\nNumber format for a <code>Visual Basic</code> literal floating-point …\nNumber format to parse a <code>Visual Basic</code> float from string.\nNumber format for a <code>XML</code> literal floating-point number.\nNumber format for a <code>YAML</code> literal floating-point number.\nNumber format for a <code>Zig</code> literal floating-point number.\nNumber format to parse a <code>Zig</code> float from string.\nExtract the base prefix character from the format packed …\nExtract the base suffix character from the format packed …\nExtract the digit separator from the format packed struct.\nExtract the exponent base from the format packed struct. …\nExtract the exponent radix from the format packed struct. …\nGet the error type from the format packed struct.\nDetermine if the format packed struct is valid.\nDetermine if the base prefix character is valid.\nDetermine if the base suffix character is valid.\nDetermine if the digit separator is valid. Digit …\nDetermine if the provided exponent flags are valid.\nDetermine if all of the “punctuation” characters for …\nDetermine if all of the “punctuation” characters are …\nDetermine if the radix is valid.\nExtract the mantissa radix from the format packed struct.\nExtract a generic radix from the format and bitflags.\nNumerical format where <code>^</code> is used as the exponent notation …\nNumber format for a <code>Clojure</code> literal floating-point number.\nNumber format to parse a <code>Clojure</code> float from string.\nNumber format for a <code>COBOL</code> literal floating-point number.\nNumber format to parse a <code>COBOL</code> float from string.\nNumber format for a <code>Coffeescript</code> literal floating-point …\nNumber format to parse a <code>Coffeescript</code> float from string.\nNumber format for a <code>C#</code> literal floating-point number.\nNumber format to parse a <code>C#</code> float from string.\nNumber format for a <code>C++</code> literal floating-point number.\nNumber format for a <code>C</code> literal floating-point number.\nNumerical format with a decimal comma. This is the …\nNumber format for a <code>D</code> literal floating-point number.\nNumber format for an <code>Elixir</code> literal floating-point number.\nNumber format to parse an <code>Elixir</code> float from string.\nNumber format for an <code>Elm</code> literal floating-point number.\nNumber format to parse an <code>Elm</code> float from string.\nNumber format for an <code>Erlang</code> literal floating-point number.\nNumber format to parse an <code>Erlang</code> float from string.\nNumber format for a <code>FORTRAN</code> literal floating-point number.\nNumber format for an <code>F#</code> literal floating-point number.\nNumber format for a <code>Gambit-C</code> literal floating-point number.\nNumber format to parse a <code>Gambit-C</code> float from string.\nNumber format for a <code>Go</code> literal floating-point number.\nNumber format for a <code>Guile</code> literal floating-point number.\nNumber format to parse a <code>Guile</code> float from string.\nNumber format for a <code>Haskell</code> literal floating-point number.\nNumber format to parse a <code>Haskell</code> float from string.\nNumerical format for hexadecimal floats, which use a <code>p</code> …\nNumber format for a <code>Javascript</code> literal floating-point …\nNumber format to parse a <code>Javascript</code> float from string.\nNumber format for a <code>Java</code> literal floating-point number.\nNumber format to parse a <code>Java</code> float from string.\nNumber format for a <code>JSON</code> literal floating-point number.\nNumber format for a <code>Julia</code> literal floating-point number.\nNumber format for a <code>Kawa</code> literal floating-point number.\nNumber format to parse a <code>Kawa</code> float from string.\nNumber format for a <code>Kotlin</code> literal floating-point number.\nNumber format to parse a <code>Kotlin</code> float from string.\nNumber format for a <code>MATLAB</code> literal floating-point number.\nNumber format for a <code>MongoDB</code> literal floating-point number.\nNumber format for a <code>MySQL</code> literal floating-point number.\nNo value.\nNo value.\nNumber format for an <code>Objective-C</code> literal floating-point …\nNumber format to parse an <code>Objective-C</code> float from string.\nNumber format for an <code>OCaml</code> literal floating-point number.\nType with the exact same size as a <code>i32</code>.\nType with the exact same size as a <code>usize</code>.\nOptions to customize writing floats.\nBuilder for <code>Options</code>.\nNumber format for a <code>Perl</code> literal floating-point number.\nNumber format for a <code>PHP</code> literal floating-point number.\nNumber format for a <code>PostgreSQL</code> literal floating-point …\nNumber format for a <code>Python</code> literal floating-point number.\nNumber format for an <code>ReasonML</code> literal floating-point …\nNumber format for a <code>Ruby</code> literal floating-point number.\nNumber format to parse a <code>Ruby</code> float from string.\nNumber format for a <code>Rust</code> literal floating-point number.\nNumber format for an <code>R</code> literal floating-point number.\nRound to the nearest float string with the given number of …\nEnumeration for how to round floats with precision control.\nNumber format for a <code>Safe</code> literal floating-point number.\nNumber format for a <code>Scala</code> literal floating-point number.\nNumber format to parse a <code>Scala</code> float from string.\nNumber format for a <code>SQLite</code> literal floating-point number.\nStandard number format.\nNumber format for a <code>Swift</code> literal floating-point number.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nNumber format for a <code>TOML</code> literal floating-point number.\nTruncate the float string with the given number of …\nNumber format for a <code>Visual Basic</code> literal floating-point …\nNumber format to parse a <code>Visual Basic</code> float from string.\nNumber format for an <code>XML</code> literal floating-point number.\nNumber format for a <code>YAML</code> literal floating-point number.\nNumber format for a <code>Zig</code> literal floating-point number.\nBuild the Options struct.\nBuild the Options struct without validation.\nGet <code>WriteFloatOptionsBuilder</code> as a static function.\nSet the character to separate the integer from the …\nGet the character to separate the integer from the …\nSet the character to designate the exponent component of a …\nGet the character to designate the exponent component of a …\nCreate the default options for a given radix.\nGet the character to separate the integer from the …\nGet the character to designate the exponent component of a …\nGet the short string representation for <code>Infinity</code>.\nGet the maximum number of significant digits to write.\nGet the minimum number of significant digits to write.\nGet the string representation for <code>NaN</code>.\nGet the minimum exponent prior to using scientific …\nGet the maximum exponent prior to using scientific …\nGet the rounding mode for writing digits with precision …\nGet if we should trim a trailing <code>&quot;.0&quot;</code> from floats.\nDetermine if <code>inf_str</code> is valid.\nSet the string representation for <code>Infinity</code>.\nGet the short string representation for <code>Infinity</code>.\nCheck if the builder state is valid.\nCheck if the options state is valid.\nSet the maximum number of significant digits to write.\nGet the maximum number of significant digits to write.\nSet the minimum number of significant digits to write.\nGet the minimum number of significant digits to write.\nDetermine if <code>nan_str</code> is valid.\nSet the string representation for <code>NaN</code>.\nGet the string representation for <code>NaN</code>.\nSet the minimum exponent prior to using scientific …\nGet the minimum exponent prior to using scientific …\nCreate options with default values.\nSet the maximum exponent prior to using scientific …\nGet the maximum exponent prior to using scientific …\nCreate <code>OptionsBuilder</code> using existing values.\nSet the rounding mode for writing digits with precision …\nGet the rounding mode for writing digits with precision …\nSet the character to separate the integer from the …\nSet the character to designate the exponent component of a …\nSet the short string representation for <code>Infinity</code>\nSet the maximum number of significant digits to write.\nSet the minimum number of significant digits to write.\nSet the string representation for <code>NaN</code>.\nSet the minimum exponent prior to using scientific …\nSet the maximum exponent prior to using scientific …\nSet the rounding mode for writing digits with precision …\nSet if we should trim a trailing <code>&quot;.0&quot;</code> from floats.\nSet if we should trim a trailing <code>&quot;.0&quot;</code> from floats.\nGet if we should trim a trailing <code>&quot;.0&quot;</code> from floats.")